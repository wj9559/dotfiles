#
# ~/.bash_prompt
#

prompt_git(){
local s branchName
if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

	# check if the current directory is in .git before running git checks
	if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

		# Ensure the index is up to date.
		git update-index --really-refresh -q &>/dev/null

		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+'
		fi

		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!'
		fi

		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='?'
		fi

		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='$'
		fi
	fi

	# Get the short symbolic ref.
	# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
	# Otherwise, just give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')"

	[ -n "${s}" ] && s=" [${s}]"

	echo -e "${1}${branchName}${2}${s}"
else
	return
fi
}

reset="\e[0m"

black="\e[0;30m"
red="\e[0;31m"
green="\e[0;32m"
yellow="\e[0;33m"
blue="\e[0;34m"
purple="\e[0;35m"
cyan="\e[0;36m"
white="\e[0;37m"

b_black="\e[1;30m"
b_red="\e[1;31m"
b_green="\e[1;32m"
b_yellow="\e[1;33m"
b_blue="\e[1;34m"
b_purple="\e[1;35m"
b_cyan="\e[1;36m"
b_white="\e[1;37m"

if [[ "${USER}" == "root" ]]; then
	userStyle="${b_red}"
    symbolStyle="${b_red}"
else
	userStyle="${b_blue}"
    symbolStyle="${b_green}"
fi

if [ -n "$SSH_CLIENT" ]; then
    symbol="SSH\\$"
else
    symbol="\\$"
fi

PS1="\n"
PS1+="\[${userStyle}\]\u"
PS1+="\[${white}\]@\h "
PS1+="\[${cyan}\]\w"
PS1+="\$(prompt_git \"\[${white}\] \[${b_purple}\]\" \"\[${b_blue}\]\")"
PS1+="\n"
PS1+="\[${symbolStyle}\]"$symbol" \[${reset}\]"
export PS1

PS2="\[${yellow}\]> \[${reset}\]"
export PS2
