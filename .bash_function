# vim: ft=sh
#
# ~/.bash_function
#

EC() {
    echo -ne '\e[01;33m'$?'\e[m'
}

calc() {
    echo "scale=3;$@" | bc -l
}

pss(){
	echo "USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND"
	ps -aux | grep -v "grep" | grep $1
}

mkcd(){
	mkdir "$@" && cd "$@"
}

alarm(){
	date1
	sleep ${1}m
	espeak "$1 miutes" &>/dev/null
	date1
	bell 4
}

cl(){
	cd "$1" && l
}

privateshell(){
	if [[ $HISTIGNORE == 'ls:*' ]]; then
		$(grep HISTIGNORE ~/.bashrc | awk "{print $2}")
		set -o history
		echo 'current shell private: off'
	else
		HISTIGNORE=ls:*
		set +o history
		echo 'current shell private: on'
	fi
}

proxyshell(){
	if [[ $http_proxy == 127.0.0.1:8787 ]]; then
		unset http_proxy && unset https_proxy
		echo 'current shell proxy: off'
	else
		export http_proxy=127.0.0.1:8787 && export https_proxy=$http_proxy
		echo 'current shell proxy: on'
	fi
}

langswitch(){
	if [[ $LANG == zh_CN.UTF-8 ]]; then
		export LANGUAGE=en_US && export LANG=en_US.UTF-8
		echo 'current shell language: en'
	else
		export LANGUAGE=zh_CN:en_US && export LANG=zh_CN.UTF-8
		echo 'current shell language: zh'
	fi
}

new(){
	roxterm -e bash -c "$1;exec bash" &>/dev/null
}

i3-save-tree-function(){
	i3-save-tree --workspace $1 | tail -n +2 | fgrep -v "// splitv" | fgrep -v "// splith" | fgrep -v "// tabbed" | sed "s|//||g" > ~/.config/i3/workspace-$1.json
}

tempaliases(){
	if [[ $1 == e ]]; then
		vim ~/.bash_aliases.temp
	else	
		source ~/.bash_aliases.temp
	fi
}

ffmpegcut(){
	if [[ $# -ne 3 ]]; then
		echo "ffmpegCut [start] [second] [filename]"
	else
		ffmpeg -ss $1 -t $2 -i $3 -acodec copy cut_$3
	fi
}

gitpull(){
for gitdir in $@; do
	for gitrepo in `ls -p $gitdir | grep "/$"`; do
		cd $gitdir/$gitrepo
		pwd
		git pull
        separatedLine 1
	done
done
[[ $# == 0 ]] && gitpull ~/git
unset gitdir
unset gitrepo
}

decompress(){
for file in $@; do
    case $file in
        *.rar            ) unrar x $file    ;; # rar a    filename.rar dirname
        *.zip            ) unzip $file      ;; # zip -r   filename.zip dirname
        *.7z             ) 7z x $file       ;; # 7z -t7z  dirname
        *.tar            ) tar xvf $file    ;; # tar cvf  filename.tar dirname
        *.tbz2|*.tar.bz2 ) tar xjvf $file   ;; # tar cjvf filename.tar.bz2 dirname
        *.bz2            ) bunzip2 -k $file ;; # bzip2 -z filename
        *.tgz|*.tar.gz   ) tar xzvf $file   ;; # tar czvf filename.tar.gz dirname
        *.gz             ) gunzip -k $file  ;; # gzip     filename
        *.tar.Z          ) tar xZvf $file   ;; # tar cZvf filename.tar.Z dirname
        *.Z              ) uncompress $file ;; # compress filename
        *.tar.xz         ) tar xJvf $file   ;; # tar cJvf filename.tar.xz dirname
        *.xz             ) xz -kd $file     ;; # xz       filename
        *                ) echo "'$file' cannot be extracted via decompress()" ;;
    esac
done
}

paclfb(){
    pacman -Ql $1 | grep /usr/bin/ | cut -d/ -f4 | sed '/^$/d'
}

gpg-verify(){
local sig=$1
local gpg=$2.gpg
local RSA=$(gpg --verify $sig 2>&1 | grep RSA | awk '{print $5}')
echo RSA=$RSA

gpg --no-default-keyring --keyring $gpg --keyserver pgp.mit.edu --recv-keys $RSA
separatedLine
gpg --verify --verbose --keyring ~/.gnupg/$gpg $sig
}

hl() {
#H_COLORS_FG="bold black on_rgb520","bold red on_rgb025"
#H_COLORS_BG="underline bold rgb520","underline bold rgb025"
    _usage() {
        echo "usage: YOUR_COMMAND | h [-idn] args...
    -i : ignore case
    -d : disable regexp
    -n : invert colors"
    }

    local _OPTS

    # detect pipe or tty
    if [[ -t 0 ]]
	then
        _usage
        return
    fi

    # manage flags
    while getopts ":idnQ" opt; do
        case $opt in
            i) _OPTS+=" -i " ;;
            d)  _OPTS+=" -Q " ;;
            n) n_flag=true ;;
            Q)  _OPTS+=" -Q " ;;
                # let's keep hidden compatibility with -Q for original ack users
            \?) _usage
                return ;;
        esac
    done

    shift $(($OPTIND - 1))

    # set zsh compatibility
    [[ -n $ZSH_VERSION ]] && setopt localoptions && setopt ksharrays && setopt ignorebraces

    local _i=0

    if [[ -n $H_COLORS_FG ]]; then
        local _CSV="$H_COLORS_FG"
        local OLD_IFS="$IFS"
        IFS=','
        local _COLORS_FG=()
        for entry in $_CSV; do
          _COLORS_FG=("${_COLORS_FG[@]}" "$entry")
        done
        IFS="$OLD_IFS"
    else
        _COLORS_FG=( 
                "underline bold red" \
                "underline bold green" \
                "underline bold yellow" \
                "underline bold blue" \
                "underline bold magenta" \
                "underline bold cyan"
                )
    fi

    if [[ -n $H_COLORS_BG ]]; then
        local _CSV="$H_COLORS_BG"
        local OLD_IFS="$IFS"
        IFS=','
        local _COLORS_BG=()
        for entry in $_CSV; do
          _COLORS_BG=("${_COLORS_BG[@]}" "$entry")
        done
        IFS="$OLD_IFS"
    else
        _COLORS_BG=(            
                "bold on_red" \
                "bold on_green" \
                "bold black on_yellow" \
                "bold on_blue" \
                "bold on_magenta" \
                "bold on_cyan" \
                "bold black on_white"
                )
    fi

    if [[ -z $n_flag ]]; then
        #inverted-colors-last scheme
        _COLORS=("${_COLORS_FG[@]}" "${_COLORS_BG[@]}")
    else
        #inverted-colors-first scheme
        _COLORS=("${_COLORS_BG[@]}" "${_COLORS_FG[@]}")
    fi

    if [[ "$#" -gt ${#_COLORS[@]} ]]; then
        echo "You have passed to hhighlighter more keywords to search than the number of configured colors.
Check the content of your H_COLORS_FG and H_COLORS_BG environment variables or unset them to use default 12 defined colors."
        return 1
    fi

    if [ -n "$ZSH_VERSION" ]; then
       local WHICH="whence"
    else [ -n "$BASH_VERSION" ]
       local WHICH="type -P"
    fi

    if ! ACKGREP_LOC="$($WHICH ack-grep)" || [ -z "$ACKGREP_LOC" ]; then
        if ! ACK_LOC="$($WHICH ack)" || [ -z "$ACK_LOC" ]; then
            echo "ERROR: Could not find the ack or ack-grep commands"
            return 1
        else
            local ACK=$($WHICH ack)
        fi
    else
        local ACK=$($WHICH ack-grep)
    fi

    # build the filtering command
    for keyword in "$@"
    do
        local _COMMAND=$_COMMAND"$ACK $_OPTS --noenv --flush --passthru --color --color-match=\"${_COLORS[$_i]}\" '$keyword' |"
        _i=$_i+1
    done
    #trim ending pipe
    _COMMAND=${_COMMAND%?}
    #echo "$_COMMAND"
    cat - | eval $_COMMAND

}
